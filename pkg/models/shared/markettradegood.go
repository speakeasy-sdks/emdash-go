// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MarketTradeGoodSupply - A rough estimate of the total supply of this good in the marketplace.
type MarketTradeGoodSupply string

const (
	MarketTradeGoodSupplyScarce   MarketTradeGoodSupply = "SCARCE"
	MarketTradeGoodSupplyLimited  MarketTradeGoodSupply = "LIMITED"
	MarketTradeGoodSupplyModerate MarketTradeGoodSupply = "MODERATE"
	MarketTradeGoodSupplyAbundant MarketTradeGoodSupply = "ABUNDANT"
)

func (e MarketTradeGoodSupply) ToPointer() *MarketTradeGoodSupply {
	return &e
}

func (e *MarketTradeGoodSupply) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCARCE":
		fallthrough
	case "LIMITED":
		fallthrough
	case "MODERATE":
		fallthrough
	case "ABUNDANT":
		*e = MarketTradeGoodSupply(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MarketTradeGoodSupply: %v", v)
	}
}

type MarketTradeGood struct {
	// The price at which this good can be purchased from the market.
	PurchasePrice int64 `json:"purchasePrice"`
	// The price at which this good can be sold to the market.
	SellPrice int64 `json:"sellPrice"`
	// A rough estimate of the total supply of this good in the marketplace.
	Supply MarketTradeGoodSupply `json:"supply"`
	// The symbol of the trade good.
	Symbol string `json:"symbol"`
	// The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be.
	TradeVolume int64 `json:"tradeVolume"`
}
