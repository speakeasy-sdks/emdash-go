// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ShipModuleSymbol string

const (
	ShipModuleSymbolModuleMineralProcessorI ShipModuleSymbol = "MODULE_MINERAL_PROCESSOR_I"
	ShipModuleSymbolModuleCargoHoldI        ShipModuleSymbol = "MODULE_CARGO_HOLD_I"
	ShipModuleSymbolModuleCrewQuartersI     ShipModuleSymbol = "MODULE_CREW_QUARTERS_I"
	ShipModuleSymbolModuleEnvoyQuartersI    ShipModuleSymbol = "MODULE_ENVOY_QUARTERS_I"
	ShipModuleSymbolModulePassengerCabinI   ShipModuleSymbol = "MODULE_PASSENGER_CABIN_I"
	ShipModuleSymbolModuleMicroRefineryI    ShipModuleSymbol = "MODULE_MICRO_REFINERY_I"
	ShipModuleSymbolModuleOreRefineryI      ShipModuleSymbol = "MODULE_ORE_REFINERY_I"
	ShipModuleSymbolModuleFuelRefineryI     ShipModuleSymbol = "MODULE_FUEL_REFINERY_I"
	ShipModuleSymbolModuleScienceLabI       ShipModuleSymbol = "MODULE_SCIENCE_LAB_I"
	ShipModuleSymbolModuleJumpDriveI        ShipModuleSymbol = "MODULE_JUMP_DRIVE_I"
	ShipModuleSymbolModuleJumpDriveIi       ShipModuleSymbol = "MODULE_JUMP_DRIVE_II"
	ShipModuleSymbolModuleJumpDriveIii      ShipModuleSymbol = "MODULE_JUMP_DRIVE_III"
	ShipModuleSymbolModuleWarpDriveI        ShipModuleSymbol = "MODULE_WARP_DRIVE_I"
	ShipModuleSymbolModuleWarpDriveIi       ShipModuleSymbol = "MODULE_WARP_DRIVE_II"
	ShipModuleSymbolModuleWarpDriveIii      ShipModuleSymbol = "MODULE_WARP_DRIVE_III"
	ShipModuleSymbolModuleShieldGeneratorI  ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_I"
	ShipModuleSymbolModuleShieldGeneratorIi ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_II"
)

func (e ShipModuleSymbol) ToPointer() *ShipModuleSymbol {
	return &e
}

func (e *ShipModuleSymbol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MODULE_MINERAL_PROCESSOR_I":
		fallthrough
	case "MODULE_CARGO_HOLD_I":
		fallthrough
	case "MODULE_CREW_QUARTERS_I":
		fallthrough
	case "MODULE_ENVOY_QUARTERS_I":
		fallthrough
	case "MODULE_PASSENGER_CABIN_I":
		fallthrough
	case "MODULE_MICRO_REFINERY_I":
		fallthrough
	case "MODULE_ORE_REFINERY_I":
		fallthrough
	case "MODULE_FUEL_REFINERY_I":
		fallthrough
	case "MODULE_SCIENCE_LAB_I":
		fallthrough
	case "MODULE_JUMP_DRIVE_I":
		fallthrough
	case "MODULE_JUMP_DRIVE_II":
		fallthrough
	case "MODULE_JUMP_DRIVE_III":
		fallthrough
	case "MODULE_WARP_DRIVE_I":
		fallthrough
	case "MODULE_WARP_DRIVE_II":
		fallthrough
	case "MODULE_WARP_DRIVE_III":
		fallthrough
	case "MODULE_SHIELD_GENERATOR_I":
		fallthrough
	case "MODULE_SHIELD_GENERATOR_II":
		*e = ShipModuleSymbol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipModuleSymbol: %v", v)
	}
}

// ShipModule - A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
type ShipModule struct {
	Capacity    *int64  `json:"capacity,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Range       *int64  `json:"range,omitempty"`
	// The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Symbol       ShipModuleSymbol `json:"symbol"`
}
