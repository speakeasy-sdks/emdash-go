// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ShipReactorSymbol string

const (
	ShipReactorSymbolReactorSolarI      ShipReactorSymbol = "REACTOR_SOLAR_I"
	ShipReactorSymbolReactorFusionI     ShipReactorSymbol = "REACTOR_FUSION_I"
	ShipReactorSymbolReactorFissionI    ShipReactorSymbol = "REACTOR_FISSION_I"
	ShipReactorSymbolReactorChemicalI   ShipReactorSymbol = "REACTOR_CHEMICAL_I"
	ShipReactorSymbolReactorAntimatterI ShipReactorSymbol = "REACTOR_ANTIMATTER_I"
)

func (e ShipReactorSymbol) ToPointer() *ShipReactorSymbol {
	return &e
}

func (e *ShipReactorSymbol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REACTOR_SOLAR_I":
		fallthrough
	case "REACTOR_FUSION_I":
		fallthrough
	case "REACTOR_FISSION_I":
		fallthrough
	case "REACTOR_CHEMICAL_I":
		fallthrough
	case "REACTOR_ANTIMATTER_I":
		*e = ShipReactorSymbol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipReactorSymbol: %v", v)
	}
}

// ShipReactor - The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
type ShipReactor struct {
	// Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition   *int64 `json:"condition,omitempty"`
	Description string `json:"description"`
	Name        string `json:"name"`
	PowerOutput int64  `json:"powerOutput"`
	// The requirements for installation on a ship
	Requirements ShipRequirements  `json:"requirements"`
	Symbol       ShipReactorSymbol `json:"symbol"`
}
