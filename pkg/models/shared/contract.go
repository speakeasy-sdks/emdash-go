// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ContractType string

const (
	ContractTypeProcurement ContractType = "PROCUREMENT"
	ContractTypeTransport   ContractType = "TRANSPORT"
	ContractTypeShuttle     ContractType = "SHUTTLE"
)

func (e ContractType) ToPointer() *ContractType {
	return &e
}

func (e *ContractType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCUREMENT":
		fallthrough
	case "TRANSPORT":
		fallthrough
	case "SHUTTLE":
		*e = ContractType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContractType: %v", v)
	}
}

type Contract struct {
	// Whether the contract has been accepted by the agent
	Accepted bool `json:"accepted"`
	// The time at which the contract is no longer available to be accepted
	DeadlineToAccept *time.Time `json:"deadlineToAccept,omitempty"`
	// Deprecated in favor of deadlineToAccept
	Expiration time.Time `json:"expiration"`
	// The symbol of the faction that this contract is for.
	FactionSymbol string `json:"factionSymbol"`
	// Whether the contract has been fulfilled
	Fulfilled bool          `json:"fulfilled"`
	ID        string        `json:"id"`
	Terms     ContractTerms `json:"terms"`
	Type      ContractType  `json:"type"`
}
