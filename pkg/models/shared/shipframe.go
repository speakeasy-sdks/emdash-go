// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ShipFrameSymbol string

const (
	ShipFrameSymbolFrameProbe          ShipFrameSymbol = "FRAME_PROBE"
	ShipFrameSymbolFrameDrone          ShipFrameSymbol = "FRAME_DRONE"
	ShipFrameSymbolFrameInterceptor    ShipFrameSymbol = "FRAME_INTERCEPTOR"
	ShipFrameSymbolFrameRacer          ShipFrameSymbol = "FRAME_RACER"
	ShipFrameSymbolFrameFighter        ShipFrameSymbol = "FRAME_FIGHTER"
	ShipFrameSymbolFrameFrigate        ShipFrameSymbol = "FRAME_FRIGATE"
	ShipFrameSymbolFrameShuttle        ShipFrameSymbol = "FRAME_SHUTTLE"
	ShipFrameSymbolFrameExplorer       ShipFrameSymbol = "FRAME_EXPLORER"
	ShipFrameSymbolFrameMiner          ShipFrameSymbol = "FRAME_MINER"
	ShipFrameSymbolFrameLightFreighter ShipFrameSymbol = "FRAME_LIGHT_FREIGHTER"
	ShipFrameSymbolFrameHeavyFreighter ShipFrameSymbol = "FRAME_HEAVY_FREIGHTER"
	ShipFrameSymbolFrameTransport      ShipFrameSymbol = "FRAME_TRANSPORT"
	ShipFrameSymbolFrameDestroyer      ShipFrameSymbol = "FRAME_DESTROYER"
	ShipFrameSymbolFrameCruiser        ShipFrameSymbol = "FRAME_CRUISER"
	ShipFrameSymbolFrameCarrier        ShipFrameSymbol = "FRAME_CARRIER"
)

func (e ShipFrameSymbol) ToPointer() *ShipFrameSymbol {
	return &e
}

func (e *ShipFrameSymbol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FRAME_PROBE":
		fallthrough
	case "FRAME_DRONE":
		fallthrough
	case "FRAME_INTERCEPTOR":
		fallthrough
	case "FRAME_RACER":
		fallthrough
	case "FRAME_FIGHTER":
		fallthrough
	case "FRAME_FRIGATE":
		fallthrough
	case "FRAME_SHUTTLE":
		fallthrough
	case "FRAME_EXPLORER":
		fallthrough
	case "FRAME_MINER":
		fallthrough
	case "FRAME_LIGHT_FREIGHTER":
		fallthrough
	case "FRAME_HEAVY_FREIGHTER":
		fallthrough
	case "FRAME_TRANSPORT":
		fallthrough
	case "FRAME_DESTROYER":
		fallthrough
	case "FRAME_CRUISER":
		fallthrough
	case "FRAME_CARRIER":
		*e = ShipFrameSymbol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipFrameSymbol: %v", v)
	}
}

// ShipFrame - The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
type ShipFrame struct {
	// Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition      *int64 `json:"condition,omitempty"`
	Description    string `json:"description"`
	FuelCapacity   int64  `json:"fuelCapacity"`
	ModuleSlots    int64  `json:"moduleSlots"`
	MountingPoints int64  `json:"mountingPoints"`
	Name           string `json:"name"`
	// The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Symbol       ShipFrameSymbol  `json:"symbol"`
}
