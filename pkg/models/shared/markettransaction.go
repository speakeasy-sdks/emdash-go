// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// MarketTransactionType - The type of transaction.
type MarketTransactionType string

const (
	MarketTransactionTypePurchase MarketTransactionType = "PURCHASE"
	MarketTransactionTypeSell     MarketTransactionType = "SELL"
)

func (e MarketTransactionType) ToPointer() *MarketTransactionType {
	return &e
}

func (e *MarketTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PURCHASE":
		fallthrough
	case "SELL":
		*e = MarketTransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MarketTransactionType: %v", v)
	}
}

type MarketTransaction struct {
	// The price per unit of the transaction.
	PricePerUnit int64 `json:"pricePerUnit"`
	// The symbol of the ship that made the transaction.
	ShipSymbol string `json:"shipSymbol"`
	// The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`
	// The total price of the transaction.
	TotalPrice int64 `json:"totalPrice"`
	// The symbol of the trade good.
	TradeSymbol string `json:"tradeSymbol"`
	// The type of transaction.
	Type MarketTransactionType `json:"type"`
	// The number of units of the transaction.
	Units int64 `json:"units"`
	// The symbol of the waypoint where the transaction took place.
	WaypointSymbol string `json:"waypointSymbol"`
}
