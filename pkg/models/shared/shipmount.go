// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ShipMountDeposits string

const (
	ShipMountDepositsQuartzSand      ShipMountDeposits = "QUARTZ_SAND"
	ShipMountDepositsSiliconCrystals ShipMountDeposits = "SILICON_CRYSTALS"
	ShipMountDepositsPreciousStones  ShipMountDeposits = "PRECIOUS_STONES"
	ShipMountDepositsIceWater        ShipMountDeposits = "ICE_WATER"
	ShipMountDepositsAmmoniaIce      ShipMountDeposits = "AMMONIA_ICE"
	ShipMountDepositsIronOre         ShipMountDeposits = "IRON_ORE"
	ShipMountDepositsCopperOre       ShipMountDeposits = "COPPER_ORE"
	ShipMountDepositsSilverOre       ShipMountDeposits = "SILVER_ORE"
	ShipMountDepositsAluminumOre     ShipMountDeposits = "ALUMINUM_ORE"
	ShipMountDepositsGoldOre         ShipMountDeposits = "GOLD_ORE"
	ShipMountDepositsPlatinumOre     ShipMountDeposits = "PLATINUM_ORE"
	ShipMountDepositsDiamonds        ShipMountDeposits = "DIAMONDS"
	ShipMountDepositsUraniteOre      ShipMountDeposits = "URANITE_ORE"
	ShipMountDepositsMeritiumOre     ShipMountDeposits = "MERITIUM_ORE"
)

func (e ShipMountDeposits) ToPointer() *ShipMountDeposits {
	return &e
}

func (e *ShipMountDeposits) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUARTZ_SAND":
		fallthrough
	case "SILICON_CRYSTALS":
		fallthrough
	case "PRECIOUS_STONES":
		fallthrough
	case "ICE_WATER":
		fallthrough
	case "AMMONIA_ICE":
		fallthrough
	case "IRON_ORE":
		fallthrough
	case "COPPER_ORE":
		fallthrough
	case "SILVER_ORE":
		fallthrough
	case "ALUMINUM_ORE":
		fallthrough
	case "GOLD_ORE":
		fallthrough
	case "PLATINUM_ORE":
		fallthrough
	case "DIAMONDS":
		fallthrough
	case "URANITE_ORE":
		fallthrough
	case "MERITIUM_ORE":
		*e = ShipMountDeposits(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipMountDeposits: %v", v)
	}
}

type ShipMountSymbol string

const (
	ShipMountSymbolMountGasSiphonI       ShipMountSymbol = "MOUNT_GAS_SIPHON_I"
	ShipMountSymbolMountGasSiphonIi      ShipMountSymbol = "MOUNT_GAS_SIPHON_II"
	ShipMountSymbolMountGasSiphonIii     ShipMountSymbol = "MOUNT_GAS_SIPHON_III"
	ShipMountSymbolMountSurveyorI        ShipMountSymbol = "MOUNT_SURVEYOR_I"
	ShipMountSymbolMountSurveyorIi       ShipMountSymbol = "MOUNT_SURVEYOR_II"
	ShipMountSymbolMountSurveyorIii      ShipMountSymbol = "MOUNT_SURVEYOR_III"
	ShipMountSymbolMountSensorArrayI     ShipMountSymbol = "MOUNT_SENSOR_ARRAY_I"
	ShipMountSymbolMountSensorArrayIi    ShipMountSymbol = "MOUNT_SENSOR_ARRAY_II"
	ShipMountSymbolMountSensorArrayIii   ShipMountSymbol = "MOUNT_SENSOR_ARRAY_III"
	ShipMountSymbolMountMiningLaserI     ShipMountSymbol = "MOUNT_MINING_LASER_I"
	ShipMountSymbolMountMiningLaserIi    ShipMountSymbol = "MOUNT_MINING_LASER_II"
	ShipMountSymbolMountMiningLaserIii   ShipMountSymbol = "MOUNT_MINING_LASER_III"
	ShipMountSymbolMountLaserCannonI     ShipMountSymbol = "MOUNT_LASER_CANNON_I"
	ShipMountSymbolMountMissileLauncherI ShipMountSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	ShipMountSymbolMountTurretI          ShipMountSymbol = "MOUNT_TURRET_I"
)

func (e ShipMountSymbol) ToPointer() *ShipMountSymbol {
	return &e
}

func (e *ShipMountSymbol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MOUNT_GAS_SIPHON_I":
		fallthrough
	case "MOUNT_GAS_SIPHON_II":
		fallthrough
	case "MOUNT_GAS_SIPHON_III":
		fallthrough
	case "MOUNT_SURVEYOR_I":
		fallthrough
	case "MOUNT_SURVEYOR_II":
		fallthrough
	case "MOUNT_SURVEYOR_III":
		fallthrough
	case "MOUNT_SENSOR_ARRAY_I":
		fallthrough
	case "MOUNT_SENSOR_ARRAY_II":
		fallthrough
	case "MOUNT_SENSOR_ARRAY_III":
		fallthrough
	case "MOUNT_MINING_LASER_I":
		fallthrough
	case "MOUNT_MINING_LASER_II":
		fallthrough
	case "MOUNT_MINING_LASER_III":
		fallthrough
	case "MOUNT_LASER_CANNON_I":
		fallthrough
	case "MOUNT_MISSILE_LAUNCHER_I":
		fallthrough
	case "MOUNT_TURRET_I":
		*e = ShipMountSymbol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipMountSymbol: %v", v)
	}
}

// ShipMount - A mount is installed on the exterier of a ship.
type ShipMount struct {
	Deposits    []ShipMountDeposits `json:"deposits,omitempty"`
	Description *string             `json:"description,omitempty"`
	Name        string              `json:"name"`
	// The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Strength     *int64           `json:"strength,omitempty"`
	Symbol       ShipMountSymbol  `json:"symbol"`
}
