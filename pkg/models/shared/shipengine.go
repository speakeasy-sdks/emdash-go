// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ShipEngineSymbol string

const (
	ShipEngineSymbolEngineImpulseDriveI ShipEngineSymbol = "ENGINE_IMPULSE_DRIVE_I"
	ShipEngineSymbolEngineIonDriveI     ShipEngineSymbol = "ENGINE_ION_DRIVE_I"
	ShipEngineSymbolEngineIonDriveIi    ShipEngineSymbol = "ENGINE_ION_DRIVE_II"
	ShipEngineSymbolEngineHyperDriveI   ShipEngineSymbol = "ENGINE_HYPER_DRIVE_I"
)

func (e ShipEngineSymbol) ToPointer() *ShipEngineSymbol {
	return &e
}

func (e *ShipEngineSymbol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENGINE_IMPULSE_DRIVE_I":
		fallthrough
	case "ENGINE_ION_DRIVE_I":
		fallthrough
	case "ENGINE_ION_DRIVE_II":
		fallthrough
	case "ENGINE_HYPER_DRIVE_I":
		*e = ShipEngineSymbol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipEngineSymbol: %v", v)
	}
}

// ShipEngine - The engine determines how quickly a ship travels between waypoints.
type ShipEngine struct {
	// Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
	Condition   *int64 `json:"condition,omitempty"`
	Description string `json:"description"`
	Name        string `json:"name"`
	// The requirements for installation on a ship
	Requirements ShipRequirements `json:"requirements"`
	Speed        int64            `json:"speed"`
	Symbol       ShipEngineSymbol `json:"symbol"`
}
