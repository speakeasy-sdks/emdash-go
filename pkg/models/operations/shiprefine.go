// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"SpaceTraders/pkg/models/shared"
	"encoding/json"
	"fmt"
	"net/http"
)

type ShipRefineSecurity struct {
	AgentToken string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type ShipRefineRequestBodyProduce string

const (
	ShipRefineRequestBodyProduceIron     ShipRefineRequestBodyProduce = "IRON"
	ShipRefineRequestBodyProduceCopper   ShipRefineRequestBodyProduce = "COPPER"
	ShipRefineRequestBodyProduceSilver   ShipRefineRequestBodyProduce = "SILVER"
	ShipRefineRequestBodyProduceGold     ShipRefineRequestBodyProduce = "GOLD"
	ShipRefineRequestBodyProduceAluminum ShipRefineRequestBodyProduce = "ALUMINUM"
	ShipRefineRequestBodyProducePlatinum ShipRefineRequestBodyProduce = "PLATINUM"
	ShipRefineRequestBodyProduceUranite  ShipRefineRequestBodyProduce = "URANITE"
	ShipRefineRequestBodyProduceMeritium ShipRefineRequestBodyProduce = "MERITIUM"
	ShipRefineRequestBodyProduceFuel     ShipRefineRequestBodyProduce = "FUEL"
)

func (e ShipRefineRequestBodyProduce) ToPointer() *ShipRefineRequestBodyProduce {
	return &e
}

func (e *ShipRefineRequestBodyProduce) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IRON":
		fallthrough
	case "COPPER":
		fallthrough
	case "SILVER":
		fallthrough
	case "GOLD":
		fallthrough
	case "ALUMINUM":
		fallthrough
	case "PLATINUM":
		fallthrough
	case "URANITE":
		fallthrough
	case "MERITIUM":
		fallthrough
	case "FUEL":
		*e = ShipRefineRequestBodyProduce(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipRefineRequestBodyProduce: %v", v)
	}
}

type ShipRefineRequestBody struct {
	Produce ShipRefineRequestBodyProduce `json:"produce"`
}

type ShipRefineRequest struct {
	RequestBody *ShipRefineRequestBody `request:"mediaType=application/json"`
	// The symbol of the ship
	ShipSymbol string `pathParam:"style=simple,explode=false,name=shipSymbol"`
}

type ShipRefineShipRefine200ResponseDataConsumed struct {
	TradeSymbol *string `json:"tradeSymbol,omitempty"`
	Units       *int64  `json:"units,omitempty"`
}

type ShipRefineShipRefine200ResponseDataProduced struct {
	TradeSymbol *string `json:"tradeSymbol,omitempty"`
	Units       *int64  `json:"units,omitempty"`
}

type ShipRefineShipRefine200ResponseData struct {
	Cargo    shared.ShipCargo                              `json:"cargo"`
	Consumed []ShipRefineShipRefine200ResponseDataConsumed `json:"consumed"`
	// A cooldown is a period of time in which a ship cannot perform certain actions.
	Cooldown shared.Cooldown                               `json:"cooldown"`
	Produced []ShipRefineShipRefine200ResponseDataProduced `json:"produced"`
}

// ShipRefineShipRefine200Response - The ship has successfully started refining.
type ShipRefineShipRefine200Response struct {
	Data ShipRefineShipRefine200ResponseData `json:"data"`
}

type ShipRefineResponse struct {
	ContentType string
	// The ship has successfully started refining.
	ShipRefine200Response *ShipRefineShipRefine200Response
	StatusCode            int
	RawResponse           *http.Response
}
